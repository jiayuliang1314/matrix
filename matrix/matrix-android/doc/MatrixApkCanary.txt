可以利用的技术
    1.解压apk ZipFile                                             => ok
    2.通过 java.awt.BufferedImage 类读取png文件并判断是否有alpha通道。=> ok
    3.求文件的MD5，MessageDigest                                   => ok
    4.利用google开源的 com.android.dexdeps 类库来读取dex文件，Bakmali库将汇编变成smail
    5.利用apktool解析xml
    6.Bakmali库将汇编变成smail

ApkChecker
    创建ApkJob，执行其run方法

ApkJob
    解析参数,创建task,执行
    1.先执行，preTasks包含解压功能，TASK_TYPE_UNZIP
    2.readConfigFile里读取了config文件，将数据设置到JobConfig

JobConfig
    /**
     * Created by jinqiuchen on 17/6/15.
     * apkPath = "/Users/admin/StudioProjects/demo/app/build/outputs/apk/demo/release/AndResGuard_app-demo-release/app-demo-release_aligned_signed.apk"
     * unzipPath = "/Users/admin/StudioProjects/demo/app/build/outputs/apk/demo/release/AndResGuard_app-demo-release/app-demo-release_aligned_signed_unzip"
     * outputPath = "/Users/admin/StudioProjects/demo/app/build/outputs/apk/demo/release/AndResGuard_app-demo-release/apk-checker-result"
     * mappingFilePath = "/Users/admin/StudioProjects/demo/app/build/outputs/mapping/demoRelease/mapping.txt"
     * resMappingFilePath = "/Users/admin/StudioProjects/demo/app/build/outputs/apk/demo/release/AndResGuard_app-demo-release/resource_mapping_app-demo-release.txt"
     * outputConfig [{"name":"-countMethod","group":[{"name":"Android System","package":"android"},{"name":"java system","package":"java"},{"name":"com.tencent.test.$","package":"com.tencent.test.$"}]}]
     * <p>
     * outputFormatList = {ArrayList@904}  size = 2
     * 0 = "mm.html"
     * 1 = "mm.json"
     * <p>
     * proguardClassMap
     * com.newbilling.view.activity.VipActivity -> com.newbilling.view.activity.VipActivity
     * <p>
     * resguardMap
     * R.animator.e -> R.animator.mtrl_chip_state_list_anim
     * <p>
     * entrySizeMap
     * "res/color/abc_primary_text_material_light.xml" -> {Pair@1161} "Pair [first=464, second=229]"
     * <p>
     * entryNameMap
     * r/n/btn_normal.webp -> res/drawable-xhdpi-v4/btn_normal.webp
     */

    public final class JobConfig {

        private String inputDir;
        private String apkPath;//ok
        private String unzipPath;//ok
        private String outputPath;//ok
        private String mappingFilePath;//ok
        private String resMappingFilePath;//ok
        private JsonArray outputConfig;//ok countMethod

        private List<String> outputFormatList;//ok
        private Map<String, String> proguardClassMap;//ok
        private Map<String, String> resguardMap;//ok
        private Map<String, Pair<Long, Long>> entrySizeMap;//ok
        private Map<String, String> entryNameMap;//ok
     }

UnzipTask
     1.输入的Apk文件首先会经过UnzipTask处理，解压到指定目录，在这一步还会做一些全局的准备工作，
     包括反混淆类名（读取mapping.txt）、反混淆资源(读取resMapping.txt)、统计文件大小等。
     2.可以利用的技术=》ok
     解压apk ZipFile

     class mapping文件截取片段：
         ...
     android.arch.core.executor.ArchTaskExecutor$1 -> android.arch.a.a.a$1:
         42:42:void <init>() -> <init>
         45:46:void execute(java.lang.Runnable) -> execute
     android.arch.core.executor.ArchTaskExecutor$2 -> android.arch.a.a.a$2:
         50:50:void <init>() -> <init>
         53:54:void execute(java.lang.Runnable) -> execute
     android.arch.core.executor.DefaultTaskExecutor -> android.arch.a.a.b:
         java.lang.Object mLock -> a
         java.util.concurrent.ExecutorService mDiskIO -> b
         android.os.Handler mMainHandler -> c
         31:33:void <init>() -> <init>
         40:41:void executeOnDiskIO(java.lang.Runnable) -> a
         45:54:void postToMainThread(java.lang.Runnable) -> b
         58:58:boolean isMainThread() -> b
         ...

    * 原始类名 -> 混淆后类名 （顶格）
    * 原始字段名 -> 混淆后字段名   （行首预留一个Tab）
    * 原始函数名 -> 混淆后函数名   （行首预留一个Tab）

    res mapping文件截取片段：
    res path mapping:
        res/layout-v22 -> r/a
        res/drawable -> r/b
        res/color-night-v8 -> r/c
        res/xml -> r/d
        res/layout -> r/e
      ...

    res id mapping:
        com.example.app.R.attr.avatar_border_color -> com.example.app.R.attr.a
        com.example.app.R.attr.actualImageScaleType -> com.example.app.R.attr.b
        com.example.app.R.attr.backgroundImage -> com.example.app.R.attr.c
        com.example.app.R.attr.fadeDuration -> com.example.app.R.attr.d
        com.example.app.R.attr.failureImage -> com.example.app.R.attr.e
    * 原始资源目录 -> 混淆后资源目录
    * 原始资源名 -> 混淆后资源名


ManifestAnalyzeTask
    todo Resources.arsc文件大家应该都知道是干什么的，它实际上就是App的资源索引表
    todo apktool里的 brut.androlib.res.decoder.AXmlResourceParser resourceParser;//解析类，需要传入arscFile
    todo 1.ApkResourceDecoder具体怎么操作
    todo 2.ApkUtil disassembleClass 干哈的,反汇编，将汇编变成smail？
    1.ManifestParser
        将AndroidManifest解析成Json数据格式
         *  "android:versionCode" -> {JsonPrimitive@1600} ""228""
         *  "android:versionName" -> {JsonPrimitive@1602} ""2.2.8""
         *  "android:compileSdkVersion" -> {JsonPrimitive@1604} ""29""
         *  "android:compileSdkVersionCodename" -> {JsonPrimitive@1606} ""10""
    2.XmlPullResourceRefDecoder
         * 遍历xml得到资源的引用名字set
         * this.resourceRefSet = {HashSet@2647}  size = 14
         *  0 = "R.string.js"
         *  1 = "R.string.k5"
         *  2 = "R.string.jr"
         *  3 = "R.array.c"
         *  4 = "R.array.d"

DuplicateFileTask
    可以利用的技术，求文件的MD5，MessageDigest
//            "com.google.android.gms.gass.R" -> {Integer@2328} 0
//            "androidx.activity.R" -> {Integer@2335} 171
//            "com.google.firebase.analytics.connector.R" -> {Integer@2328} 0
//            "com.example.lib_utils.R" -> {Integer@2338} 1707
FindNonAlphaPngTask
    可以检测出apk中非透明的png文件
     * 可以利用的技术：通过 java.awt.BufferedImage 类读取png文件并判断是否有alpha通道。=》ok
ResProguardCheckTask
    查看是否使用ResProguard
    原理：ResProguard会将res资源变成r，或者保留res，其他资源改为[a-z_0-9]{1,3}
MultiLibCheckTask
    查看lib下有几个文件夹
ShowFileSizeTask
     * 按文件大小排序列出apk中包含的文件
     * 列出超过一定大小的文件，可按文件后缀过滤，并且按文件大小排序
UncompressedFileTask
     * 直接利用UnzipTask中统计的各个文件的压缩前和压缩后的大小，判断压缩前和压缩后大小是否相等。
     * 如果相等，说明没有压缩
     * 如果不相等，说明有压缩了

CountClassTask
    利用google开源的 com.android.dexdeps 类库来读取dex文件
    可以利用的技术DexData，读取dex里的class，不过只是ClassName
CountRTask
    可以利用的技术DexData，读取dex里的class，不过只是ClassName
MethodCountTask
     * todo
             MethodRef[] methodRefs = dexData.getMethodRefs();                  //方法引用？
             ClassRef[] externalClassRefs = dexData.getExternalReferences();    //外部类？
            classInternalMethod.clear();
            classExternalMethod.clear();
     * 统计方法数
     * 统计dex包含的方法数，并支持将输出结果按照类名(class)或者包名(package)来分组
     * MethodCountTask 可以统计出各个Dex中的方法数，并按照类名或者包名来分组输出结果。
     * 实现方法：利用google开源的 com.android.dexdeps 类库来读取dex文件，统计方法数。
UnusedAssetsTask
     * UnusedAssetsTask 可以检测出apk中未使用的assets文件
     * 可以利用的技术：搜索smali文件中引用字符串常量的指令，判断引用的字符串常量是否某个assets文件的名称
     * 读取dex里的class
     * DexBackedDexFile -》 ClassDef -》Smali

UnusedResourcesTask
     * todo
    unusedResSet.removeAll(resourceRefSet);
    可以利用的技术DexData，读取dex里的smail，然后找到资源引用
    可以利用的技术解析xml，
    具体的挺复杂
MultiSTLCheckTask
     * todo
     * CheckMultiSTLTask 可以检测apk中的so是否静态链接STL
     * 实现方法：通过nm工具来读取so的符号表，如果出现 std:: 即表示so静态链接了STL。
UnStrippedSoCheckTask
     * todo
     * UnStrippedSoCheckTask 可以检测出apk中未经裁剪的动态库文件
     * 实现方法：使用nm工具读取动态库文件的符号表，若输出结果中包含no symbols字样则表示该动态库已经过裁剪


