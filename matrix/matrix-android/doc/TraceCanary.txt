TracePlugin
    1.init方法里初始化了四个tracer
        private EvilMethodTracer evilMethodTracer;
        private StartupTracer startupTracer;
        private FrameTracer frameTracer;
        private AnrTracer anrTracer;

        anrTracer = new AnrTracer(traceConfig);
        frameTracer = new FrameTracer(traceConfig);
        evilMethodTracer = new EvilMethodTracer(traceConfig);
        startupTracer = new StartupTracer(traceConfig);

    2.start方法里
        首先调用UIThreadMonitor的init初始化方法
        然后调用AppMethodBeat开启onStart方法
        然后调用UIThreadMonitor开启onStart方法
        四个trace调用onStartTrace
            UIThreadMonitor.getMonitor().init(traceConfig);
            AppMethodBeat.getInstance().onStart();
            UIThreadMonitor.getMonitor().onStart();
            anrTracer.onStartTrace();
            frameTracer.onStartTrace();
            evilMethodTracer.onStartTrace();
            startupTracer.onStartTrace();
TraceConfig
    包含了些配置信息
        public boolean defaultFpsEnable;        //是否开启Fps监控
        public boolean defaultMethodTraceEnable;//是否开启方法监控
        public boolean defaultStartupEnable;    //是否开启startup监控
        public boolean defaultAnrEnable;        //是否开启anr监控
        public boolean isDebug;                 //是否debug
        public boolean isDevEnv;                //是否dev环境
        public String splashActivities;         //splash activity
        public Set<String> splashActivitiesSet; //
        public boolean isHasActivity;

        getSplashActivities
        getEvilThresholdMs  //evil方法，超时方法阈值 700ms
        getTimeSliceMs      //？不知道干哈的
        getColdStartupThresholdMs//10s
        getWarmStartupThresholdMs//4s
        getFrozenThreshold  //掉了42帧特别严重的掉帧
        getHighThreshold    //24
        getMiddleThreshold  //9
        getNormalThreshold  //3

UIThreadMonitor
    作用：单例模式，通过设置Looper中的printer，来判断Message的执行起止时间。然后hook Choreographer中的input animation traversal回调数组，向其中添加Runnable来获取每个操作的耗时。最后将这些数据抛出给各个Tracer作为判断的依据。
    会涉及到：LooperMonitor，AppMethodBeat
    实现：
        1.init方法
            // 反射，找到在 Choreographer内部类 CallbackQueue 上添加回调的addCallbackLocked方法
            // 反射获取Choreographer中CALLBACK_INPUT、CALLBACK_ANIMATION、CALLBACK_TRAVERSAL三种类型的CallbackQueue的addCallbackLocked方法的句柄。
            addInputQueue = ReflectUtils.reflectMethod(callbackQueues[CALLBACK_INPUT], ADD_CALLBACK, long.class, Object.class, Object.class);
            addAnimationQueue = ReflectUtils.reflectMethod(callbackQueues[CALLBACK_ANIMATION], ADD_CALLBACK, long.class, Object.class, Object.class);
            addTraversalQueue = ReflectUtils.reflectMethod(callbackQueues[CALLBACK_TRAVERSAL], ADD_CALLBACK, long.class, Object.class, Object.class);
            //向LooperMonitor注册Message执行开始的回调、执行结束的回调。这里的Message是指主线程中发生的所有Message，
            // 包括App自己的以及Framework中的，Choreographer中的自然也可以捕获到。
              LooperMonitor.register(new LooperMonitor.LooperDispatchListener() {
                  @Override
                  public boolean isValid() {
                      return isAlive;
                  }

                  @Override
                  public void dispatchStart() {
                      super.dispatchStart();
                      UIThreadMonitor.this.dispatchBegin();
                  }

                  @Override
                  public void dispatchEnd() {
                      super.dispatchEnd();
                      UIThreadMonitor.this.dispatchEnd();
                  }
              });
        2.

LooperMonitor
    作用：Looper 的监控是由类 LooperMonitor 实现的，原理很简单，为主线程 Looper 设置一个 Printer 即可，
    但值得一提的是，LooperMonitor 不会直接设置 Printer，而是先获取旧对象，并创建代理对象，
    避免影响到其它用户设置的 Printer：
LooperObserver
    作用：它是 Looper 的观察者，在 Looper 分发消息前后、刷新 UI 时回调，这几个回调方法也是 ANR、慢方法等模块的判断依据：